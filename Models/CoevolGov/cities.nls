
;;
; cities





;;
;
;  @ requires t \geq 1
to cities:evolve-populations

  ; current time
  let t ticks
  let delta_t item t global:dates - item (t - 1) global:dates

  ; previous populations as list
  let prev-populations matrix:get-column global:populations (t - 1)
  let n length prev-populations

  let diag-pops (matrix:make-diag prev-populations)
  let diag-pops-gravity matrix:map [? -> ? ^ global:gravity-gamma] (matrix:times-scalar diag-pops sum prev-populations) ; ? should be 1 / sum prev-populations -> ok the term simplifies when normalized by mean-pot-gravity
  let pots-gravity matrix:times diag-pops-gravity (matrix:times global:gravity-weights diag-pops-gravity)
  ;show sum map sum matrix:to-row-list global:gravity-weights
  matrix:set-diag-scalar pots-gravity 0
  let mean-pot-gravity (matrix:sum pots-gravity) / (n * n)
  if mean-pot-gravity = 0 [set mean-pot-gravity 1]
  set pots-gravity matrix:times-scalar pots-gravity (1 / mean-pot-gravity)

  ; add country effect - multiploer latrix is constant
  set pots-gravity matrix:times-element-wise pots-gravity global:country-decay-matrix
  
  ; update gravity flows
  set global:gravity-flows matrix:copy pots-gravity

  ;  - cache nw measures
  network:cache-nw-measures

  ; update city pair flows (for viz)
  network:update-pair-flows

  ;; current populations
  let gravity-growth (matrix:times-scalar (matrix:times pots-gravity (matrix:make-constant n 1 1)) (global:gravity-weight / n))
  
  let r (matrix:times-scalar (matrix:times-element-wise (matrix:as-column-matrix prev-populations) ((matrix:make-constant n 1 global:growth-rate) matrix:+ gravity-growth)) delta_t)
  ;show matrix:max r show matrix:min r
  ;show matrix:as-column-matrix prev-populations
  let current-populations matrix:plus (matrix:as-column-matrix prev-populations) r
  ;show current-populations

  matrix:set-column global:populations t map [? -> first ?] matrix:to-row-list current-populations


  ; update agent cities pop
  update-cities-populations


end



to-report cities:flatten-pops-feedback [m]
  let n length matrix:get-row m 0
  let res matrix:make-constant (n * (n - 1) / 2) 1 0
  let i 0
  repeat n - 2 [
    let col matrix:submatrix m (i + 1) i n (i + 1)
    matrix:set-submatrix res ((i * (n - 1)) - (i * (i - 1) / 2)) 0 col
    set i i + 1
  ]
  report res
end

to-report cities:flatten-dists-feedback [m]
  let res [] let i 1
  foreach but-last matrix:to-row-list m [? ->
     set res (utils:list:concatenate list res (sublist ? i (length ?)))
     set i i + 1
  ]
  report res
end


to-report cities:feedback-distance [v1 v2 v3]
  if v1 = 0 and v2 = 0 [report 0]
  ifelse v1 <= 0 or v2 <= 0 [report 1e6][if abs v1 >= 1 [show v1 set v1 v1 / abs v1] report v3 * asin v1]
end

to-report cities:zero-infinite [x]
  ifelse x = 0 [report 1e10][report x]
end


to cities:update-weights
  ;; weights
  set global:gravity-weights matrix:map [? -> exp (- ? / global:gravity-decay)] global:distance-matrix

end





to update-cities-populations
  ask cities [
    set city:population matrix:get global:populations city:index ticks
    ; update histories
    set city:population-history lput city:population city:population-history
    set city:expected-population-history lput matrix:get global:real-populations city:index ticks city:expected-population-history
    set city:current-mse city-mse ticks
  ]
end


;;
; city indicators / procedures


to-report city:closeness-centrality
   let d matrix:get-row global:distance-matrix city:index
   let s 0 let i 0 foreach d [? -> if i != city:index [set s s + 1 / ?] set i i + 1]
   report s / ((length d) - 1)
end

to-report city:accessibility
  let d matrix:get-row global:distance-matrix city:index
  let pops replace-item city:index (matrix:get-column global:populations ticks) 0
  report sum utils:list:times-element-wise pops (map [? -> exp (- ? / global:gravity-decay)] d)
end


to city:new-city
  set shape "circle" set color red
  set size ln city:population
  if city:name != 0 [
    set label city:name set label-color 125
    set turtle:name city:name
  ]
  set city:population-history (list city:population) set city:expected-population-history (list city:population)
  ifelse xcor < min-pxcor + (max-pxcor - min-pxcor) / 2 [set city:country 0][set city:country 1]
end

;;
; city procedure that can be used by any turtle (network nodes in particular)
to turtle:set-coords-l93 [x y]
  ;setxy random-xcor random-ycor

  ; conversion lambert93 -> world coordinates - LAMBERT II ?
  ;  100000 1100000 6125000 7120000
  let l93xmin 825 let l93xmax 10200 let l93ymin 16700 let l93ymax 27000
  let xx min-pxcor + ((max-pxcor - min-pxcor) * (x - l93xmin) / (l93xmax - l93xmin))
  let yy min-pycor + ((max-pycor - min-pycor) * (y - l93ymin) / (l93ymax - l93ymin))
  setxy (min list (max list min-pxcor xx) max-pxcor) (min list (max list min-pycor yy) max-pycor)
end




